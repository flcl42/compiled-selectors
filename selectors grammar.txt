/* description: Parses end executes mathematical expressions. */

/* lexical grammar */
%lex
%%

\s+                           return 'SPACE'
[a-zA-Z_][a-zA-Z0-9-_]*       return 'NAME'
[#][a-zA-Z_][a-zA-Z0-9-_]*    return 'ID'
[.][a-zA-Z_][a-zA-Z0-9-_]*    return 'CLASS'
","                   return 'COMMA'
<<EOF>>               return 'EOF'
.                     return 'INVALID'

/lex

/* operator associations and precedence */


%start start

%% /* language grammar */

start: eor EOF{return (function(){ 

var parse = null;
var counter = 0; 

parse = function (doc, node)
{

var result="", str="";

console.log([node.task]);
counter+=1;
switch(node.task)
{
case "tag": result = "var val"+counter+" = "+(doc!=null?doc:"document")+".getElementsByTagName('"+node.tag+"');\n\
for(var i"+counter+"=0; val"+counter+".length > i"+counter+"; i"+counter+"++ ){\nresult[result.length()]=val"+counter+"[i"+counter+"]};\n"; break;
case "class": result = "var val"+counter+" = "+(doc!=null?doc:"document")+".getElementsByClassName('"+node.class+"');\n\
for(var i"+counter+"=0; val"+counter+".length > i"+counter+"; i"+counter+"++ ){\nresult[result.length()]=val"+counter+"[i"+counter+"]};\n"; break;
case "id": result = "var val"+counter+" = "+(doc!=null?doc:"document")+".getElementById('"+node.id+"');\
\nresult[result.length()]=val;"; break;

}

if(doc==null)
{
  return str= "function(){ var result=[];\n"+result+"\nreturn result;}";
}
return result;
}
return parse(null, $1);

})();};

eor: eor COMMA SPACE edesc { if($1.task=="or"){ $1.selectors[$1.selectors.length] = $3; $$= $1;}else $$ = {task:"or", selectors: [$1, $2]} }
| edesc |;

edesc: eand | edesc SPACE eand{ wh = $1; while(wh.where!=null)wh=wh.where; wh.where = $3; $$= $1;};

eand: e 
| eand e { if($1.task=="and"){ $1.selectors[$1.selectors.length] = $3; $$= $1;}else $$ = {task:"and", selectors: [$1, $2]} };

e: 
ID { $$= {"task": "id", "id": $1.split("#")[1], "where": null};} 
| CLASS { $$= {"task": "class", "class": $1.split(".")[1], "where": null};} 
| tag {$$= {"task": "tag", "tag": $1, "where": null};}; 
tag: NAME {$$=$1;};